Microsoft (R) Macro Assembler Version 14.29.30147.0	    12/26/22 02:11:24
main.asm						     Page 1 - 1


				include Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
 = start@0			main EQU start@0

				ReadMapFile proto
				DrawWall proto
				KeyEvent proto, key: word
				DrawPlayer proto, char: byte
				ErasePlayer proto
				TwoDToLine proto, x: byte, y: byte
				PosIsWall proto, x: byte, y: byte
				IsGameOver proto
				Timer proto
				IncreaseStep proto
				PrintStep proto

 00000000			.data
 00000000 00000000		fileHandle dword ?
 00000004 00000000		outputHandle dword ?
 00000008 00000000		inputHandle dword ?
 0000000C 0100 0100		screenBufferSize COORD <256, 256>

 00000010 6D 61 70 2E 74	mapFileName byte "map.txt", 0
	   78 74 00
 00000018 00			readBuffer byte ?
 00000019 00000000		bytesRead dword ?
 0000001D 00			mazeSize byte ?
 0000001E  00008000 [		edgeData byte 32768 DUP(4 DUP(0))
	    00000004 [
	     00
	    ]
	   ]
 0002001E  00008000 [		wallCharMap byte 32768 DUP(0)
	    00
	   ]
 0002801E 23			wallCharacter byte 35 ; '35 -> #'
 0002801F 03			mazePosOffset byte 3

 00028020 00			upperBorder byte ?
 00028021 00			lowerBorder byte ?
 00028022 00			leftBorder byte ?
 00028023 00			rightBorder byte ?

 00028024 0023 000A		playerCurCoord COORD <35, 10>
 00028028 0023 000A		playerNextCoord COORD <35, 10>

 0002802C 00000000		currentStep dword ?
 00028030 53 74 65 70 73	stepString byte "Steps: ", 0
	   3A 20 00

 00028038 54 69 6D 65 3A	timeString byte "Time: ", 0
	   20 00
 0002803F 00000000		initTime dword ?
 00028043 00000000		currentTime dword ?

 00000000			.data?

 00000000 0000 0000 0000	_st SYSTEMTIME <?>
	   0000 0000 0000
	   0000 0000


 00000000			.code
 00000000			main proc

 00000000			INITIAL:

					invoke GetStdHandle, STD_OUTPUT_HANDLE
 00000007  A3 00000004 R		mov outputHandle, eax

					invoke GetStdHandle, STD_INPUT_HANDLE
 00000013  A3 00000008 R		mov inputHandle, eax

					invoke SetConsoleScreenBufferSize,
						outputHandle,
						screenBufferSize

					invoke CreateFile,
						addr mapFileName,
						GENERIC_READ, ; access mode
						DO_NOT_SHARE, ; share mode
						NULL, ; ptr to security attributes
						OPEN_EXISTING, ; file creation options
						FILE_ATTRIBUTE_NORMAL, ; file attributes
						0 ; handle to template file
 00000045  A3 00000000 R		mov fileHandle, eax

					invoke ReadMapFile
					invoke DrawWall

 00000054			PLAYING:
					
 00000054  66| 0F B6 05			movzx ax, mazePosOffset
	   0002801F R
 0000005C  66| 40			inc ax
 0000005E  66| A3			mov playerCurCoord.x, ax
	   00028024 R
 00000064  66| A3			mov playerCurCoord.y, ax
	   00028026 R
 0000006A  66| A3			mov playerNextCoord.x, ax
	   00028028 R
 00000070  66| A3			mov playerNextCoord.y, ax
	   0002802A R
					invoke DrawPlayer, 'v'

					invoke GetSystemTime, addr _st
 00000087  BA 00000000 R	    mov edx, offset _st
 0000008C  0F B7 5A 0C		    movzx ebx, word ptr SYSTEMTIME.wsecond[edx]
 00000090  89 1D 0002803F R		mov initTime, ebx
 00000096  C7 05 0002802C R		mov currentStep, 0
	   00000000
 000000A0  C7 05 00028043 R		mov currentTime, -1
	   FFFFFFFF
					.while 1
						invoke Timer
						invoke PrintStep
 000000B4  B8 00000064				mov eax, 100
 000000B9  E8 00000000 E			call Delay
 000000BE  E8 00000000 E			call ReadKey
						invoke KeyEvent, ax
						invoke IsGameOver
						.break .if al
					.endw

 000000D8			EXIT_PROC:

					invoke CloseHandle, fileHandle
					exit

 000000EA			main endp


 000000EA			ReadMapFile proc
					
					; read size
 000000EA  B8 00000000			mov eax, 0
					.while 1
 000000EF  50					push eax
						invoke ReadFile,
							fileHandle,
							addr readBuffer, 1,
							addr bytesRead, 0
 00000109  8A 15 00000018 R			mov dl, readBuffer
 0000010F  58					pop eax
						.break .if dl < 48
 00000115  80 EA 30				sub dl, 48
 00000118  B3 0A				mov bl, 10
 0000011A  F6 E3				mul bl
 0000011C  02 C2				add al, dl
					.endw
					
 00000120  A2 0000001D R		mov mazeSize, al
					invoke ReadFile,
						fileHandle,
						addr readBuffer, 1,
						addr bytesRead, 0

					; read edges
 0000013E  BF 0000001E R		mov edi, offset edgeData
 00000143  57				push edi
					.while 1
 00000144  B9 00000000				mov ecx, 0
						.while cl < 4
 0000014B  B8 00000000					mov eax, 0
 00000150  51						push ecx
							.while 1
 00000151  50							push eax
								invoke ReadFile,
									fileHandle,
									addr readBuffer, 1,
									addr bytesRead, 0
 0000016B  8A 15 00000018 R					mov dl, readBuffer
 00000171  58							pop eax
								.break .if dl < 48
								.if dl >= 58
 0000017C  59								pop ecx
 0000017D  5F								pop edi
 0000017E  B0 FF							mov al, 0ffh
 00000180  88 07							mov [edi], al
 00000182  C3								ret
								.endif
 00000183  80 EA 30						sub dl, 48
 00000186  B3 0A						mov bl, 10
 00000188  F6 E3						mul bl
 0000018A  02 C2						add al, dl
							.endw

 0000018E  59						pop ecx
 0000018F  FE C1					inc cl

 00000191  5F						pop edi
 00000192  88 07					mov [edi], al
 00000194  47						inc edi
 00000195  57						push edi
						.endw

						invoke ReadFile,
							fileHandle,
							addr readBuffer, 1,
							addr bytesRead, 0
					.endw
 000001B6  C3				ret

 000001B7			ReadMapFile endp


 000001B7			DrawWall proc

 000001B7  E8 00000000 E		call ClrScr

 000001BC  BE 0000001E R		mov esi, offset edgeData
					.while 1
 000001C1  8A 16				mov dl, [esi]
						.break .if dl == 0ffh
 000001C8  8A 76 01				mov dh, [esi + 1]

						.if dl == [esi + 2]
 000001D0  B3 00					mov bl, 0 ; increase Y
						.else
 000001D4  B3 01					mov bl, 1 ; increase X
						.endif

 000001D6  66| D1 E2				shl dx, 1
 000001D9  02 15 0002801F R			add dl, mazePosOffset
 000001DF  02 35 0002801F R			add dh, mazePosOffset
 000001E5  B9 00000003				mov ecx, 3
						.while cl
 000001EC  53						push ebx
 000001ED  51						push ecx

							invoke TwoDToLine, dl, dh
 000001F9  BF 0002001E R				mov edi, offset wallCharMap
 000001FE  03 F8					add edi, eax
 00000200  C6 07 01					mov [edi], byte ptr 1

 00000203  E8 00000000 E				call Gotoxy
 00000208  0F B6 05					movzx eax, wallCharacter
	   0002801E R
 0000020F  E8 00000000 E				call WriteChar
							
 00000214  59						pop ecx
 00000215  5B						pop ebx
							.if bl
 0000021A  FE C2						inc dl
							.else
 0000021E  FE C6						inc dh
							.endif
 00000220  FE C9					dec cl
						.endw

 00000226  83 C6 04				add esi, 4
					.endw

 0000022B  A0 0000001D R		mov al, mazeSize
 00000230  D0 E0			shl al, 1
 00000232  02 05 0002801F R		add al, mazePosOffset
 00000238  A2 00028021 R		mov lowerBorder, al
 0000023D  A2 00028023 R		mov rightBorder, al
 00000242  A0 0002801F R		mov al, mazePosOffset
 00000247  2C 02			sub al, 2
 00000249  A2 00028020 R		mov upperBorder, al
 0000024E  A2 00028022 R		mov leftBorder, al

 00000253  B2 00			mov dl, 0
 00000255  B6 00			mov dh, 0
 00000257  E8 00000000 E		call Gotoxy
 0000025C  C3				ret

 0000025D			DrawWall endp


 0000025D			KeyEvent proc, key: word
					
 00000260  50				push eax
 00000261  52				push edx
 00000262  66| 8B 45 08			mov ax, key
					.if ax == 1177h ; Up
 0000026C  66| A1				mov ax, playerCurCoord.y
	   00028026 R
 00000272  FE C8				dec al
 00000274  50					push eax
						invoke PosIsWall,
							byte ptr playerCurCoord.x, al
 00000281  8A D0				mov dl, al
 00000283  58					pop eax
						.if al > upperBorder && dl == 0
 00000290  66| A3					mov playerNextCoord.y, ax
	   0002802A R
 00000296  E8 00000135					call ErasePlayer
							invoke DrawPlayer, '^'
 000002A2  66| A3					mov playerCurCoord.y, ax
	   00028026 R
							invoke IncreaseStep
						.endif
					.endif

					.if ax == 1F73h ; Down
 000002B3  66| A1				mov ax, playerCurCoord.y
	   00028026 R
 000002B9  FE C0				inc al
 000002BB  50					push eax
						invoke PosIsWall,
							byte ptr playerCurCoord.x, al
 000002C8  8A D0				mov dl, al
 000002CA  58					pop eax
						.if al < lowerBorder && dl == 0
 000002D7  66| A3					mov playerNextCoord.y, ax
	   0002802A R
 000002DD  E8 000000EE					call ErasePlayer
							invoke DrawPlayer, 'v'
 000002E9  66| A3					mov playerCurCoord.y, ax
	   00028026 R
							invoke IncreaseStep
						.endif
					.endif

					.if ax == 1E61h ; Left
 000002FA  66| A1				mov ax, playerCurCoord.x
	   00028024 R
 00000300  FE C8				dec al
 00000302  50					push eax
 00000303  8A D0				mov dl, al
						invoke PosIsWall,
							dl, byte ptr playerCurCoord.y
 00000313  8A D0				mov dl, al
 00000315  58					pop eax
						.if al > leftBorder && dl == 0
 00000322  66| A3					mov playerNextCoord.x, ax
	   00028028 R
 00000328  E8 000000A3					call ErasePlayer
							invoke DrawPlayer, '<'
 00000334  66| A3					mov playerCurCoord.x, ax
	   00028024 R
							invoke IncreaseStep
						.endif
					.endif

					.if ax == 2064h ; Right
 00000345  66| A1				mov ax, playerCurCoord.x
	   00028024 R
 0000034B  FE C0				inc al
 0000034D  50					push eax
 0000034E  8A D0				mov dl, al
						invoke PosIsWall,
							dl, byte ptr playerCurCoord.y
 0000035E  8A D0				mov dl, al
 00000360  58					pop eax
						.if al < rightBorder && dl == 0
 0000036D  66| A3					mov playerNextCoord.x, ax
	   00028028 R
 00000373  E8 00000058					call ErasePlayer
							invoke DrawPlayer, '>'
 0000037F  66| A3					mov playerCurCoord.x, ax
	   00028024 R
							invoke IncreaseStep
						.endif
					.endif

					.if ax == 1c0dh ; Enter
						invoke DrawWall
						invoke DrawPlayer, 'v'
					.endif

 0000039C  5A				pop edx
 0000039D  58				pop eax
					ret

 000003A2			KeyEvent endp


 000003A2			DrawPlayer proc, char: byte

 000003A5  52				push edx
 000003A6  50				push eax
 000003A7  8A 15 00028028 R		mov dl, byte ptr playerNextCoord.x
 000003AD  8A 35 0002802A R		mov dh, byte ptr playerNextCoord.y
 000003B3  E8 00000000 E		call Gotoxy
 000003B8  0F B6 45 08			movzx eax, char
 000003BC  E8 00000000 E		call WriteChar
 000003C1  B2 00			mov dl, 0
 000003C3  B6 00			mov dh, 0
 000003C5  E8 00000000 E		call Gotoxy
 000003CA  58				pop eax
 000003CB  5A				pop edx
					ret

 000003D0			DrawPlayer endp


 000003D0			ErasePlayer proc uses eax edx

 000003D2  8A 15 00028024 R		mov dl, byte ptr playerCurCoord.x
 000003D8  8A 35 00028026 R		mov dh, byte ptr playerCurCoord.y
 000003DE  E8 00000000 E		call Gotoxy
 000003E3  B8 00000020			mov eax, " "
 000003E8  E8 00000000 E		call WriteChar
					ret

 000003F0			ErasePlayer ENDP


 000003F0			TwoDToLine proc, x: byte, y: byte
					
 000003F3  53				push ebx
 000003F4  8A 1D 0000001D R		mov bl, mazeSize
 000003FA  D0 E3			shl bl, 1
 000003FC  FE CB			dec bl
 000003FE  02 1D 0002801F R		add bl, mazePosOffset
 00000404  0F B6 45 0C			movzx eax, y
 00000408  F6 E3			mul bl
 0000040A  66| 03 45 08			add ax, word ptr x
 0000040E  5B				pop ebx
					ret

 00000413			TwoDtoLine endp


 00000413			PosIsWall proc, x: byte, y: byte
					
 00000416  56				push esi
 00000417  BE 0002001E R		mov esi, offset wallCharMap
					invoke TwoDToLine, x, y
 00000429  03 F0			add esi, eax
 0000042B  8A 06			mov al, [esi]
 0000042D  5E				pop esi
					ret

 00000432			PosIsWall endp


 00000432			IsGameOver proc
					
 00000432  8A 25 00028024 R		mov ah, byte ptr playerCurCoord.x
 00000438  A0 00028026 R		mov al, byte ptr playerCurCoord.y
 0000043D  FE C4			inc ah
 0000043F  FE C0			inc al
					.if al == lowerBorder || ah == rightBorder
 00000451  B0 01				mov al, 1
					.else
 00000455  80 EC 02				sub ah, 2
 00000458  2C 02				sub al, 2
						.if	al == upperBorder || ah == leftBorder
 0000046A  B0 01					mov al, 1
						.else
 0000046E  B0 00					mov al, 0
						.endif
					.endif
 00000470  C3				ret

 00000471			IsGameOver endp

 00000471			Timer proc uses eax ebx ecx edx

 00000475			L1:
				    invoke GetSystemTime,addr _st
 0000047F  BA 00000000 R	    mov edx, offset _st
 00000484  0F B7 4A 0C		    movzx ecx, word ptr SYSTEMTIME.wsecond[edx]
 00000488  8B 1D 0002803F R		mov ebx, initTime
 0000048E  3B D9		    cmp ebx, ecx
 00000490  74 2B			je L3
 00000492  EB 00		    jmp L2
 00000494			L2:
 00000494  B2 00			mov dl, 0
 00000496  B6 01			mov dh, 1
 00000498  E8 00000000 E		call Gotoxy
 0000049D  BA 00028038 R		mov edx, offset timeString
 000004A2  E8 00000000 E		call WriteString
 000004A7  A1 00028043 R		mov eax, currentTime
 000004AC  40			    inc eax
 000004AD  A3 00028043 R		mov currentTime, eax
 000004B2  E8 00000000 E	    call WriteDec
 000004B7  89 0D 0002803F R		mov initTime, ecx

 000004BD			L3:
					ret

 000004C2			Timer endp

 000004C2			IncreaseStep proc uses eax edx

 000004C4  A1 0002802C R		mov eax, currentStep
 000004C9  40				inc eax
 000004CA  A3 0002802C R		mov currentStep, eax
					ret

 000004D2			IncreaseStep endp

 000004D2			PrintStep proc uses eax edx

 000004D4  66| BA 0000			mov dx, 0
 000004D8  E8 00000000 E		call gotoxy
 000004DD  BA 00028030 R		mov edx, offset stepString
 000004E2  E8 00000000 E		call WriteString
 000004E7  A1 0002802C R		mov eax, currentStep
 000004EC  E8 00000000 E	    call WriteDec
					ret

 000004F4			PrintStep endp

				end main
Microsoft (R) Macro Assembler Version 14.29.30147.0	    12/26/22 02:11:24
main.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_BSS . . . . . . . . . . . . . .	32 Bit	 00000010 Para	  Public  'BSS'  
_DATA  . . . . . . . . . . . . .	32 Bit	 00028047 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000004F4 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DrawPlayer . . . . . . . . . . .	P Near	 000003A2 _TEXT	Length= 0000002E Public STDCALL
  char . . . . . . . . . . . . .	Byte	 bp + 00000008
DrawWall . . . . . . . . . . . .	P Near	 000001B7 _TEXT	Length= 000000A6 Public STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ErasePlayer  . . . . . . . . . .	P Near	 000003D0 _TEXT	Length= 00000020 Public STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IncreaseStep . . . . . . . . . .	P Near	 000004C2 _TEXT	Length= 00000010 Public STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsGameOver . . . . . . . . . . .	P Near	 00000432 _TEXT	Length= 0000003F Public STDCALL
KeyEvent . . . . . . . . . . . .	P Near	 0000025D _TEXT	Length= 00000145 Public STDCALL
  key  . . . . . . . . . . . . .	Word	 bp + 00000008
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PosIsWall  . . . . . . . . . . .	P Near	 00000413 _TEXT	Length= 0000001F Public STDCALL
  x  . . . . . . . . . . . . . .	Byte	 bp + 00000008
  y  . . . . . . . . . . . . . .	Byte	 bp + 0000000C
PrintStep  . . . . . . . . . . .	P Near	 000004D2 _TEXT	Length= 00000022 Public STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadMapFile  . . . . . . . . . .	P Near	 000000EA _TEXT	Length= 000000CD Public STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Timer  . . . . . . . . . . . . .	P Near	 00000471 _TEXT	Length= 00000051 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000475 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00000494 _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 000004BD _TEXT	
TwoDToLine . . . . . . . . . . .	P Near	 000003F0 _TEXT	Length= 00000023 Public STDCALL
  x  . . . . . . . . . . . . . .	Byte	 bp + 00000008
  y  . . . . . . . . . . . . . .	Byte	 bp + 0000000C
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
start@0  . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000EA Public STDCALL
  INITIAL  . . . . . . . . . . .	L Near	 00000000 _TEXT	
  PLAYING  . . . . . . . . . . .	L Near	 00000054 _TEXT	
  EXIT_PROC  . . . . . . . . . .	L Near	 000000D8 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
_st  . . . . . . . . . . . . . .	SYSTEMTIME  00000000 _BSS	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
bytesRead  . . . . . . . . . . .	DWord	 00000019 _DATA	
currentStep  . . . . . . . . . .	DWord	 0002802C _DATA	
currentTime  . . . . . . . . . .	DWord	 00028043 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
edgeData . . . . . . . . . . . .	Byte	 0000001E _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileHandle . . . . . . . . . . .	DWord	 00000000 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
initTime . . . . . . . . . . . .	DWord	 0002803F _DATA	
inputHandle  . . . . . . . . . .	DWord	 00000008 _DATA	
leftBorder . . . . . . . . . . .	Byte	 00028022 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
lowerBorder  . . . . . . . . . .	Byte	 00028021 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
main . . . . . . . . . . . . . .	Text   	 start@0
mapFileName  . . . . . . . . . .	Byte	 00000010 _DATA	
mazePosOffset  . . . . . . . . .	Byte	 0002801F _DATA	
mazeSize . . . . . . . . . . . .	Byte	 0000001D _DATA	
outputHandle . . . . . . . . . .	DWord	 00000004 _DATA	
playerCurCoord . . . . . . . . .	COORD	 00028024 _DATA	
playerNextCoord  . . . . . . . .	COORD	 00028028 _DATA	
readBuffer . . . . . . . . . . .	Byte	 00000018 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
rightBorder  . . . . . . . . . .	Byte	 00028023 _DATA	
screenBufferSize . . . . . . . .	COORD	 0000000C _DATA	
stepString . . . . . . . . . . .	Byte	 00028030 _DATA	
timeString . . . . . . . . . . .	Byte	 00028038 _DATA	
upperBorder  . . . . . . . . . .	Byte	 00028020 _DATA	
wallCharMap  . . . . . . . . . .	Byte	 0002001E _DATA	
wallCharacter  . . . . . . . . .	Byte	 0002801E _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
